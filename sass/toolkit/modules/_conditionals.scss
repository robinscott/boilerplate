// Media query helpers. These make producing IE layouts
// super easy.

// The base css you write should be for mobile. You can
// then add desktop styles on top.
//
// Usage:
//
//   div.columns {
//     border: 1px solid;
//
//     @include media(desktop){
//       width: 30%;
//       float: left;
//     }
//     @include ie-lte(8) {
//       something to fix visual bugs in old IE
//     }
//     @include ie(6) {
//       padding: 0;
//     }
//   }


@-ms-viewport {
  width: device-width;
}

@-o-viewport {
  width: device-width;
}

@mixin breakpoint($min: 0, $max: 0) {
  $type: type-of($min);
  @if $type == string {
    @if $min == xs {
      @media (max-width: 767px) { @content; } // Mobile Devices
    }
    @else if $min == sm {
      @media (min-width: 768px) { @content; } // Tablet Devices
    }
    @else if $min == md {
      @media (min-width: 992px) { @content; } // Desktops
    }
    @else if $min == lg {
      @media (min-width: 1200px) { @content; } // Widescreen Desktops
    }
    // Otherwise pass a warning to the compiler as to the appropriate options
    @else {
      @warn "The breakpoint mixin supports the following attributes: xs, sm, md, lg";
    }
  }
  @else if $type == number {
    // Allow for custom parameters for min and max size
    $query: "all" !default;
    @if $min != 0 and $max != 0 { $query: "(min-width: #{$min}) and (max-width: #{$max})"; } // set both min and max
    @else if $min != 0 and $max == 0 { $query: "(min-width: #{$min})"; } // set just min
    @else if $min == 0 and $max != 0 { $query: "(max-width: #{$max})"; } // set just max
    @media #{$query} { @content; }
  }
}

@mixin ie-lte($version) {
  @if $is-ie {
    @if $ie-version <= $version {
      @content;
    }
  }
}

@mixin ie($version) {
  @if $is-ie {
    @if $ie-version == $version {
      @content;
    }
  }
}
